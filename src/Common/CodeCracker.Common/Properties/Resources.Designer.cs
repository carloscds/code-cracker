//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeCracker.Properties {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CodeCracker.Properties.Resources", typeof(Resources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die String interpolation allows for better reading of the resulting string when compared to Console.WriteLine arguments. You should use Console.WriteLine with arguments only when another method is supplying the format string. ähnelt.
        /// </summary>
        public static string ConsoleWriteLineAnalyzer_Description {
            get {
                return ResourceManager.GetString("ConsoleWriteLineAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use string interpolation ähnelt.
        /// </summary>
        public static string ConsoleWriteLineAnalyzer_MessageFormat {
            get {
                return ResourceManager.GetString("ConsoleWriteLineAnalyzer_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use string interpolation instead of arguments on Console.WriteLine ähnelt.
        /// </summary>
        public static string ConsoleWriteLineAnalyzer_Title {
            get {
                return ResourceManager.GetString("ConsoleWriteLineAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Change to string interpolation ähnelt.
        /// </summary>
        public static string ConsoleWriteLineCodeFixProvider_Title {
            get {
                return ResourceManager.GetString("ConsoleWriteLineCodeFixProvider_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die An empty catch block suppress all errors and shouldn&apos;t be used.\r\nIf the error is expected consider logging it or changing the control flow such that it is explicit. ähnelt.
        /// </summary>
        public static string EmptyCatchBlockAnalyzer_Description {
            get {
                return ResourceManager.GetString("EmptyCatchBlockAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Empty Catch Block. ähnelt.
        /// </summary>
        public static string EmptyCatchBlockAnalyzer_Message {
            get {
                return ResourceManager.GetString("EmptyCatchBlockAnalyzer_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Catch block cannot be empty ähnelt.
        /// </summary>
        public static string EmptyCatchBlockAnalyzer_Title {
            get {
                return ResourceManager.GetString("EmptyCatchBlockAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Insert Exception class to Catch ähnelt.
        /// </summary>
        public static string EmptyCatchBlockCodeFixProvider_InsertException {
            get {
                return ResourceManager.GetString("EmptyCatchBlockCodeFixProvider_InsertException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove Empty Catch Block ähnelt.
        /// </summary>
        public static string EmptyCatchBlockCodeFixProvider_Remove {
            get {
                return ResourceManager.GetString("EmptyCatchBlockCodeFixProvider_Remove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove Empty Catch Block and Put a Documentation Link about Try...Catch use ähnelt.
        /// </summary>
        public static string EmptyCatchBlockCodeFixProvider_RemoveAndDocumentation {
            get {
                return ResourceManager.GetString("EmptyCatchBlockCodeFixProvider_RemoveAndDocumentation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove wrapping Try Block ähnelt.
        /// </summary>
        public static string EmptyCatchBlockCodeFixProvider_RemoveTry {
            get {
                return ResourceManager.GetString("EmptyCatchBlockCodeFixProvider_RemoveTry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Change field type &apos;{0}&apos; accessibility to be as accessible as field &apos;{1}&apos; ähnelt.
        /// </summary>
        public static string InconsistentAccessibilityInFieldType_Title {
            get {
                return ResourceManager.GetString("InconsistentAccessibilityInFieldType_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Change parameter type &apos;{0}&apos; accessibility to be as accessible as indexer &apos;this[{1}]&apos; ähnelt.
        /// </summary>
        public static string InconsistentAccessibilityInIndexerParameter_Title {
            get {
                return ResourceManager.GetString("InconsistentAccessibilityInIndexerParameter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Change indexer return type &apos;{0}&apos; accessibility to be as accessible as indexer &apos;this[{1}]&apos; ähnelt.
        /// </summary>
        public static string InconsistentAccessibilityInIndexerReturnType_Title {
            get {
                return ResourceManager.GetString("InconsistentAccessibilityInIndexerReturnType_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Change parameter type &apos;{0}&apos; accessibility to be as accessible as method &apos;{1}&apos; ähnelt.
        /// </summary>
        public static string InconsistentAccessibilityInMethodParameter_Title {
            get {
                return ResourceManager.GetString("InconsistentAccessibilityInMethodParameter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Change return type &apos;{0}&apos; accessibility to be as accessible as method &apos;{1}&apos; ähnelt.
        /// </summary>
        public static string InconsistentAccessibilityInMethodReturnType_Title {
            get {
                return ResourceManager.GetString("InconsistentAccessibilityInMethodReturnType_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Change property type &apos;{0}&apos; accessibility to be as accessible as property &apos;{1}&apos; ähnelt.
        /// </summary>
        public static string InconsistentAccessibilityInPropertyType_Title {
            get {
                return ResourceManager.GetString("InconsistentAccessibilityInPropertyType_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Make method non async ähnelt.
        /// </summary>
        public static string MakeMethodNonAsyncCodeFixProvider_Title {
            get {
                return ResourceManager.GetString("MakeMethodNonAsyncCodeFixProvider_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In C#6 the nameof() operator should be used to specify the name of a program element instead of a string literal as it produce code that is easier to refactor. ähnelt.
        /// </summary>
        public static string NameOfAnalyzer_Description {
            get {
                return ResourceManager.GetString("NameOfAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use &apos;nameof({0})&apos; instead of specifying the program element name. ähnelt.
        /// </summary>
        public static string NameOfAnalyzer_MessageFormat {
            get {
                return ResourceManager.GetString("NameOfAnalyzer_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use nameof ähnelt.
        /// </summary>
        public static string NameOfAnalyzer_Title {
            get {
                return ResourceManager.GetString("NameOfAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use nameof() ähnelt.
        /// </summary>
        public static string NameOfCodeFixProvider_Title {
            get {
                return ResourceManager.GetString("NameOfCodeFixProvider_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Getter only properties with backing read-only field can be converted to getter-only auto-properties. ähnelt.
        /// </summary>
        public static string ReplaceWithGetterOnlyAutoPropertyAnalyzer_Description {
            get {
                return ResourceManager.GetString("ReplaceWithGetterOnlyAutoPropertyAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Property {0} can be converted to an getter-only auto-property. ähnelt.
        /// </summary>
        public static string ReplaceWithGetterOnlyAutoPropertyAnalyzer_MessageFormat {
            get {
                return ResourceManager.GetString("ReplaceWithGetterOnlyAutoPropertyAnalyzer_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Property can be simplified by using an getter-only auto-property. ähnelt.
        /// </summary>
        public static string ReplaceWithGetterOnlyAutoPropertyAnalyzer_Title {
            get {
                return ResourceManager.GetString("ReplaceWithGetterOnlyAutoPropertyAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Simplify by using an getter-only auto-property ähnelt.
        /// </summary>
        public static string ReplaceWithGetterOnlyAutoPropertyCodeFixProvider_Title {
            get {
                return ResourceManager.GetString("ReplaceWithGetterOnlyAutoPropertyCodeFixProvider_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die String interpolation allows for better reading of the resulting string when compared to String.Format. You should use String.Format only when another method is supplying the format string. ähnelt.
        /// </summary>
        public static string StringFormatAnalyzer_Description {
            get {
                return ResourceManager.GetString("StringFormatAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use string interpolation ähnelt.
        /// </summary>
        public static string StringFormatAnalyzer_MessageFormat {
            get {
                return ResourceManager.GetString("StringFormatAnalyzer_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use string interpolation instead of String.Format ähnelt.
        /// </summary>
        public static string StringFormatAnalyzer_Title {
            get {
                return ResourceManager.GetString("StringFormatAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Change to string interpolation ähnelt.
        /// </summary>
        public static string StringFormatCodeFixProvider_Title {
            get {
                return ResourceManager.GetString("StringFormatCodeFixProvider_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Auto properties offer a more concise way of defining a property. If you are using simple getters and setters you are able to simplify your code with autoproperties. ähnelt.
        /// </summary>
        public static string SwitchToAutoPropAnalyzer_Description {
            get {
                return ResourceManager.GetString("SwitchToAutoPropAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Change {0} to an auto property ähnelt.
        /// </summary>
        public static string SwitchToAutoPropAnalyzer_MessageFormat {
            get {
                return ResourceManager.GetString("SwitchToAutoPropAnalyzer_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use auto property ähnelt.
        /// </summary>
        public static string SwitchToAutoPropAnalyzer_Title {
            get {
                return ResourceManager.GetString("SwitchToAutoPropAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Change to auto property ähnelt.
        /// </summary>
        public static string SwitchToAutoPropCodeFixProvider_Title {
            get {
                return ResourceManager.GetString("SwitchToAutoPropCodeFixProvider_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die You have missing/unexistent parameters in Xml Docs ähnelt.
        /// </summary>
        public static string XmlDocumentationAnalyzer_Title {
            get {
                return ResourceManager.GetString("XmlDocumentationAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Create missing parameters in xml docs ähnelt.
        /// </summary>
        public static string XmlDocumentationCreateMissingParametersCodeFixProvider_Title {
            get {
                return ResourceManager.GetString("XmlDocumentationCreateMissingParametersCodeFixProvider_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove unexistent parameters in xml docs ähnelt.
        /// </summary>
        public static string XmlDocumentationRemoveNonExistentParametersCodeFixProvider_Title {
            get {
                return ResourceManager.GetString("XmlDocumentationRemoveNonExistentParametersCodeFixProvider_Title", resourceCulture);
            }
        }
    }
}
